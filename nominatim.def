Bootstrap: docker
From: ubuntu:24.04

%arguments
  NOMINATIM_VERSION=5.1.0

%files
  # postgres configuration files:
  conf.d/postgresql.conf /app/conf/postgresql.conf
  conf.d/pg_hba.conf /app/conf/pg_hba.conf
  conf.d/postgres-import.conf /etc/postgresql/16/main/conf.d/postgres-import.conf.disabled
  conf.d/postgres-tuning.conf /etc/postgresql/16/main/conf.d/
  conf.d/env /nominatim/.env

  # Nominatim configuration files:
  nominatim_project/config.sh /app/config.sh

  # Open Street Map (OSM) data:
  nominatim_project/iowa-latest.osm.pbf /app/data/iowa-latest.osm.pbf

  # Additional Metadata:
  nominatim_project/secondary_importance.sql.gz /app/data/secondary_importance.sql.gz
  nominatim_project/us_postcodes.csv.gz /app/data/us_postcodes.csv.gz
  nominatim_project/wikimedia-importance.csv.gz /app/data/wikimedia-importance.csv.gz
  nominatim_project/tiger-nominatim-preprocessed-latest.csv.tar.gz /app/data/tiger-nominatim-preprocessed-latest.csv.tar.gz


%environment
  # when building the container this avoids having to enter locale imformation
  export DEBIAN_FRONTEND=noninteractive
  export LANG=C.UTF-8

  # nominatim env var
  export PROJECT_DIR=/nominatim
  export USER_AGENT=mediagis/nominatim-docker:{{ NOMINATIM_VERSION }}

%post
  export NOMINATIM_VERSION={{ NOMINATIM_VERSION }}
  export PGDATA=/app/postgresql/data
  export POSTGRES_RUN_DIR=/app/postgresql/run
  export PROJECT_DIR=/nominatim
  export PBF_PATH=/app/data/iowa-latest.osm.pbf
  export IMPORT_STYLE=full

  # working dir 
  mkdir -p /app 
  cd /app

  # apt caching
  rm -f /etc/apt/apt.conf.d/docker-clean
  echo 'Binary::apt::APT::Keep-Downloaded-Packages "true";' > /etc/apt/apt.conf.d/keep-cache

  # no daemons: since no init system package post-install scripts may try to start a service that doesnt exist.
  echo '#!/bin/sh\nexit 101' > /usr/sbin/policy-rc.d
  chmod +x /usr/sbin/policy-rc.d

  # since apt install postgresql-16 would start the postgres service the above is needed.

  # Update/Install apt packages:
  apt-get -y update -qq
  apt-get -y install locales
  locale-gen en_US.UTF-8
  update-locale LANG=en_US.UTF-8

  apt-get -y install \
    -o APT::Install-Recommends="false" \
    -o APT::Install-Suggests="false" \
    build-essential \
    osm2pgsql \
    pkg-config \
    libicu-dev \
    python3-dev \
    python3-pandas \
    python3-pip \
    python3-icu \
    postgresql-postgis \
    postgresql-postgis-scripts \
    sqlite3 \
    libsqlite3-mod-spatialite \
    spatialite-bin \
    curl \
    tree \
    vim \
    wget \
    unzip \
    gdal-bin \
    python3-gdal \
    sudo

  # Install Python packages:
  pip install --break-system-packages \
    nominatim-db==$NOMINATIM_VERSSION \
    nominatim-api==$NOMINATIM_VERSION \
    osmium \
    'psycopg[binary]' \
    aiosqlite \

  # non-root postgresql user:
  useradd -m -s /bin/bash pguser

  # postgresql directories
  mkdir -p $PGDATA $POSTGRES_RUN_DIR /app/postgresql/log
  chown -R pguser:pguser /app/postgresql
  chmod -R 755 /app/postgresql
  
  # initialize postgresql during build as pguser:
  echo "build: Initializing PostgreSQL database as pguser..."
  su pguser -c "/usr/lib/postgresql/16/bin/initdb -D $PGDATA --auth=trust"

  # configure postgres
  cp /app/conf/postgresql.conf $PGDATA/postgresql.conf
  cp /app/conf/pg_hba.conf $PGDATA/pg_hba.conf

  # start PostgreSQL
  echo "Starting PostgreSQL..."
  su pguser -c "/usr/lib/postgresql/16/bin/pgctl -D $PGDATA -l /app/postgresql/log/build.log start"

  for i in {1..30}; do
    if su pguser -c "/usr/lib/postgresql/16/bin/pg_isready -h localhost -p 5432"; then
      echo "PostgreSQL is ready for database build!"
      break
    fi
    echo "Waiting for PostgreSQL during build... ($i/30)"
    sleep 2
  done


  # project dir:
  mkdir -p /nominatim
  chown pguser:pguser /nominatim
  chmod 755 /nominatim
  cd /nominatim

  # create required users (nominatim and www-data) before we import:
  echo "Creating nominatim and www-data users..."

  # Create superuser roles
  su pguser -c "createuser -h localhost -p 5432 --createdb --superuser root" 2>/dev/null || echo "User 'root' already exists"
  su pguser -c "createuser -h localhost -p 5432 --createdb --superuser pguser" 2>/dev/null || echo "User 'pguser' already exists"

  # Create www-data user (web server user)
  su pguser -c "createuser -h localhost -p 5432 --no-createdb --no-superuser --no-createrole www-data" 2>/dev/null || echo "User 'www-data' already exists"

  # Create nominatim read-only user 
  su pguser -c "createuser -h localhost -p 5432 --no-createdb --no-superuser --no-createrole nominatim" 2>/dev/null || echo "User 'nominatim' already exists"

  # Verify users were created (connect to the postgres database explicitly)
  echo "Verifying database users..."
  su pguser -c "psql -h localhost -p 5432 -d postgres -c '\\du'"

  # run config.sh to setup .env file:
  echo "Configuring Nominatim using config.sh..."
  /app/config.sh

  # add database DSN to .env
  echo "NOMINATIM_DATABASE_DSN=pgsql:host=localhost;port=5432;user=pguser;dbname=nominatim" >> /nominatim/.env

  echo "Configuration before import:"
  cat /nominatim/.env

  # init Nominatim: create database and tables:
  echo "Initializing Nominatim import..."

  # TODO: threads should be changed
  su pguser -c "cd /nominatim && nominatim import --osm-file /app/data/iowa-latest.osm.pbf --project-dir /nominatim --threads 4"

  # Grant permissions to users after database and tables are created
  echo "Granting database permissions..."
  su pguser -c "psql -h localhost -p 5432 -d nominatim -c 'GRANT CONNECT ON DATABASE nominatim TO \"www-data\";'" || echo "Grant connect to www-data failed"
  su pguser -c "psql -h localhost -p 5432 -d nominatim -c 'GRANT CONNECT ON DATABASE nominatim TO nominatim;'" || echo "Grant connect to nominatim failed"
  su pguser -c "psql -h localhost -p 5432 -d nominatim -c 'GRANT USAGE ON SCHEMA public TO \"www-data\";'" || echo "Grant usage to www-data failed"
  su pguser -c "psql -h localhost -p 5432 -d nominatim -c 'GRANT USAGE ON SCHEMA public TO nominatim;'" || echo "Grant usage to nominatim failed"
  su pguser -c "psql -h localhost -p 5432 -d nominatim -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO \"www-data\";'" || echo "Grant select to www-data failed"
  su pguser -c "psql -h localhost -p 5432 -d nominatim -c 'GRANT SELECT ON ALL TABLES IN SCHEMA public TO nominatim;'" || echo "Grant select to nominatim failed"

  # Import metadata
  echo "Trying to import Nominatim project metadata..."

  if [ -f /app/data/us_postcodes.csv.gz ]; then
      echo "Importing US postcodes..."
      su pguser -c "cd /nominatim && nominatim refresh --postcodes --project-dir /nominatim" 2>/dev/null || echo "Postcodes import failed, continuing..."
  fi

  if [ -f /app/data/wikimedia-importance.csv.gz ]; then
      echo "Importing Wikimedia importance data..."
      cp /app/data/wikimedia-importance.csv.gz /nominatim/
      chown pguser:pguser /nominatim/wikimedia-importance.csv.gz
      su pguser -c "cd /nominatim && nominatim refresh --importance --project-dir /nominatim" || echo "Importance import failed, continuing..."
  fi

  if [ -f /app/data/tiger-nominatim-preprocessed-latest.csv.tar.gz ]; then
    echo "Importing Tiger-Line Files"
    cp /app/data/tiger-nominatim-preprocessed-latest.csv.tar.gz /nominatim/
    chown pguser:pguser /nominatim/tiger-nominatim-preprocessed-latest.csv.tar.gz
    su pguser -c "mkdir -p /nominatim/tiger_data && tar -xzf /nominatim/tiger-nominatim-preprocessed-latest.csv.tar.gz -C /nominatim/tiger_data"
    su pguser -c "cd /nominatim && nominatim add-data --tiger-data /nominatim/tiger-nominatim-preprocessed-latest.csv.tar.gz"
  fi

  echo "Final indexing..."
  su pguser -c "cd /nominatim && nominatim index --project-dir /nominatim"

  echo "Converting database to SQLite..."
  su pguser -c "cd /nominatim && nominatim convert -o /nominatim/nominatim.sqlite"

  # Verify SQLite database
  if [ -f /nominatim/nominatim.sqlite ]; then
      echo "SQLite database created successfully: $(du -h /nominatim/nominatim.sqlite)"
      ls -la /nominatim/nominatim.sqlite
  else
      echo "ERROR: SQLite database was not created!"
      exit 1
  fi

  # update .env to use SQLite (the scuffed way)
  # TODO: update this to not be hardcoded

  echo "updating Nominatim to use SQLite (experimental)..."
  cp /nominatim/.env /nominatim/.env.postgres
    cat > /nominatim/.env << EOF
NOMINATIM_DATABASE_DSN=sqlite:dbname=/nominatim/nominatim.sqlite
NOMINATIM_TOKENIZER=icu
NOMINATIM_IMPORT_STYLE=full
NOMINATIM_REPLICATION_UPDATE_INTERVAL=86400
NOMINATIM_REPLICATION_RECHECK_INTERVAL=900
NOMINATIM_FLATNODE_FILE=
EOF

  echo "Final Nominatim .env:"
  cat /nominatim/.env

  # sotp postgresql after conversion:
  echo "Stopping PostgreSQL..."
  su pguser -c "/user/lib/postgresql/16/bin/pg_ctl -D $PGDATA stop"

  # Clean up:
  echo "Cleaning up build files..."

  rm -rf /app/postgresql /app/data
  apt-get -y remove --purge --auto-remove build-essential postgresql-postgis postgresql-postgis-scripts
  apt-get clean
  find /tmp -maxdepth 1 -type f -delete 2>/dev/null || true
  find /var/tmp -maxdepth 1 -type f -delete 2>/dev/null || true
  pip cache purge 2>/dev/null || true

  # Make SQLite database accessible
  chmod 755 /nominatim
  chmod 644 /nominatim/nominatim.sqlite

  # Make scripts executable
  chmod +x /app/config.sh

%runscript
  #!/bin/bash
  echo "Nominatim database is ready."
  echo "Database: /nominatim/nominatim.sqlite"
  echo "Size: $(du -h /nominatim/nominatim.sqlite 2>/dev/null || echo 'Unknown')"

  # commands
  if [ "$1" = "python" ]; then
      shift
      python3 "$@"
  elif [ "$1" = "bash" ]; then
      /bin/bash
  elif [ "$1" = "python3" ]; then
      shift
      python3 "$@"
  elif [ "$#" -gt 0 ]; then
      # Execute the provided command
      exec "$@"
  else
      echo "Container ready. Database contains data in SQLite format at /nominatim/nominatim.sqlite..."
      echo "Usage:"
      echo "  apptainer run nominatim.sif python3 script.py"
      echo "  apptainer run nominatim.sif bash"
      /bin/bash
  fi


%help
  A base for the container. Defines Ubuntu 24.04 as the base image. With postgres supporty.
